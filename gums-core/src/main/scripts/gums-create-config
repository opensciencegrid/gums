#!/bin/sh
#
#
# Detects where gums is installed and puts the directory
# name in ScriptPath. Then cd to that directory.
#
# Author: Jay Packard, John Hover, Marco Mambelli
#

usage() {
    echo "Copies a template configuration to the config directory, thus making "
    echo "it the current configuration, and will also replace user, host, password "
    echo "within the hibernatePersistenceFactory element and cn within the "
    echo "hostToGroupMapping.  If user, password, or host is not specified an attempt "
    echo "will be made to extract one or more of them from the current configuration."
    echo "Usage: $0"
    echo "   --template your_template (full path required)"
        echo "     (default - /usr/lib/gums/config/gums.config.template) [optional]> "
    echo "   --osg-template <download current osg template config> [optional]"
    echo "   --user <database user for GUMS> [optional]"
    echo "   --password <GUMS database password> [optional]"
    echo "   --host <GUMS database server host> [optional]"
        echo "   --http-cert <HTTP certificate "
        echo "     (default - /etc/grid-security/http/httpcert.pem)> [optional]"
        echo "   --http-key <HTTP key "
        echo "     (default - /etc/grid-security/http/httpkey.pem)> [optional]"
        echo "   --x509-cert-dir <CA certificates directory "
        echo "     (default to $X509_CERT_DIR or /etc/grid-security/certificates if undefined)>" 
        echo "     [optional]"
    echo "   --noprompt [Don't prompt user, optional]"
    echo "   --help [Print this message]"
    echo
    echo "Examples:"
    echo "  $0 --osg-template"
    echo "  $0 --template mytemplate"
    echo "  $0 --user gums --host gums.mysite.com:49151 --password secret --template mytemplate"
    echo

    exit -1;
}

#-------------------------------------------
#
# Setup global variables
#
#-------------------------------------------
TEMPLATE="/usr/lib/gums/config/gums.config.template"
OSGTEMPLATE=0
USER=""
SERVER=""
PASSWORD=""
PROMPT=1
SHOW_USAGE=0
PARSEFIELD=""
PARSERESULT=""
HTTP_CERT="/etc/grid-security/http/httpcert.pem"
HTTP_KEY="/etc/grid-security/http/httpkey.pem"

# Get X509CERTDIR from the environment if X509_CERT_DIR is defined
# Command line will override it
if [ -n "$X509_CERT_DIR" ]
then 
  X509CERTDIR="$X509_CERT_DIR"
else
  X509CERTDIR="/etc/grid-security/certificates"
fi


#-------------------------------------------
#
# Parse command line
#
#-------------------------------------------
while [ $# -gt 0 ]
do
  case "$1" in 
      --noprompt) PROMPT=0;;
      --template) TEMPLATE="$2"; shift;;
      --osg-template) OSGTEMPLATE=1;;
      --user)     USER="$2";     shift;;
      --password) PASSWORD="$2"; shift;;
      --host)     SERVER="$2";   shift;;
      --help)     usage;;
      -help)     usage;;
      -h)         usage;;
      --http-cert) HTTP_CERT="$2"; shift;;
      --http-key) HTTP_KEY="$2"; shift;;
      --x509-cert-dir) X509CERTDIR="$2"; shift;;
      *)          echo "Invalid parameter '$1'"; usage;;
  esac
  shift
done

if [ "$OSGTEMPLATE" -eq 1 ]
then
    TEMPLATE=/etc/gums/gums.config.template
fi

parseConfig() {
    if [ -e /etc/gums/gums.config ]
    then
        unset done
        exec 3< /etc/gums/gums.config
        until [ $done ]
        do
            read <&3 myline
            if [ $? != 0 ]
            then
                done=1
                continue
            fi
            if [ "$PARSEFIELD" = "connection.url" ]
            then
                temp=`echo $myline | grep $PARSEFIELD | sed -e s/\"/\'/g | cut -d / -f 3 | cut -d \' -f 2`
            else
                temp=`echo $myline | grep $PARSEFIELD | sed -e s/\"/\'/g | cut -d \' -f 2`
            fi
            if [ $temp ]
            then
                PARSERESULT=$temp
                done=1
                continue
            fi
        done
    fi
}

if [ -z "$USER" ] 
then
    echo Searching for MySQL username in current configuration...
    PARSEFIELD="connection.username"
    PARSERESULT=""
    parseConfig
    USER=$PARSERESULT
    if [ "$USER" ] 
    then
        echo found MySQL user \"$USER\"
    else
        echo WARNING: no MySQL username found
    fi
fi

if [ -z "$PASSWORD" ] 
then
    echo Searching for MySQL password in current configuration...
    PARSEFIELD="connection.password"
    PARSERESULT=""
    parseConfig
    PASSWORD=$PARSERESULT
    if [ "$PASSWORD" ] 
    then
        echo found MySQL password \"$PASSWORD\"
    else
        echo WARNING: no MySQL password found - will use blank password
    fi
fi

if [ -z "$SERVER" ] 
then
    echo Searching for MySQL server in current configuration...
    PARSEFIELD="connection.url"
    PARSERESULT=""
    parseConfig
    SERVER=$PARSERESULT
    if [ "$SERVER" ] 
    then
        echo found MySQL server \"$SERVER\"
    else
        echo WARNING: no MySQL server found
    fi
fi

if [ "$SHOW_USAGE" -eq 1 ]
then
    echo ""
    usage
fi


DOMAINNAME=`echo "$SERVER" | awk 'BEGIN{FS=":"}{print $1}' | awk 'BEGIN{FS="."}{for(i=2;i<=NF;i++) printf(i<NF?"%s.":"%s\n",$i)}'`

if [ -z "$DOMAINNAME" ] || [ "$DOMAINNAME" == "localdomain" ]
then
    DOMAINNAME=`dnsdomainname`
fi

echo "will use domain name \"$DOMAINNAME\" in hostToGroupMapping"

if [ -d "$X509CERTDIR" ]
then
  # X509CERTDIR=`cd $X509CERTDIR; pwd`
  echo "will use the certificate dir: $X509CERTDIR"
else
  echo "WARNING: the certificate dir ($X509CERTDIR) specified does not exist"
  echo "Be sure to set up your CA certificates before attempting to use GUMS"
fi
  
#-------------------------------------------
#
# Create the gums.config
#
#-------------------------------------------
if [ ! -e "$TEMPLATE" ];then
    echo "ERROR: the template ($TEMPLATE) specified does not exist"
  exit 1
fi

if [ -e /etc/gums/gums.config ]
then
    if [ "$PROMPT" -eq 1 ]
    then
        echo "WARNING: gums.config already present. Would you like to overwrite it? "
        echo "(Enter 'yes' to overwrite)"
        read response
        if [ "$response" != "yes" ]
        then
      echo "Exiting at your request. No changes have been made."
            exit 1
        fi
    fi

  echo "Backing up your gums.config as gums.config.old"
  cp /etc/gums/gums.config /etc/gums/gums.config.old
fi

#-------------------------
#  Fix for old template
#   - add X509CERTDIR placeholder right after http cert
#   (not yet: - substitute certficed path with placeholder)
#-------------------------
FORCENEW=1 
if ( [ "$OSGTEMPLATE" -eq 1 ] && [ "$FORCENEW" -eq 1 ] )
then
  echo "Adapting file by adding X509 certificates directory"
  cp $TEMPLATE ${TEMPLATE}.tmp
  cat ${TEMPLATE}.tmp \
 | sed -e "s!sslKey='/etc/grid-security/http/httpkey.pem'!sslKey='/etc/grid-security/http/httpkey.pem'  sslCAFiles='@X509CERTFILES@'!g"  \
       -e "s!sslKey=\"/etc/grid-security/http/httpkey.pem\"!sslKey=\"/etc/grid-security/http/httpkey.pem\"  sslCAFiles=\'@X509CERTFILES@\'!g"  \
 > $TEMPLATE
fi


cat $TEMPLATE \
  | sed -e s/@USER@/$USER/g                    \
             -e s/@SERVER@/$SERVER/g                \
             -e s/@PASSWORD@/$PASSWORD/g            \
             -e s/@DOMAINNAME@/$DOMAINNAME/g        \
             -e s/GUMS_[0-9]_[0-9]/GUMS_1_3/g       \
             -e s!@HTTP_CERT@!$HTTP_CERT!g    \
             -e s!@HTTP_KEY@!$HTTP_KEY!g    \
             -e s!@X509CERTDIR@!$X509CERTDIR!g    \
             -e s!@X509CERTFILES@!$X509CERTDIR/*.0!g    \
  > /etc/gums/gums.config

echo "New gums.config has been created successfully"
ls -l /etc/gums/gums.config
exit 0

